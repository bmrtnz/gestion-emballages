# Development Docker Compose Configuration
# This extends the main docker-compose.yml for development

services:
  # PostgreSQL Database (Development)
  postgres:
    environment:
      POSTGRES_DB: gestion_emballages_dev
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_password
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./docker/postgres/dev-scripts:/docker-entrypoint-initdb.d/dev

  # Redis (Development)
  redis:
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    volumes:
      - redis_dev_data:/data

  # MinIO (Development)
  minio:
    environment:
      MINIO_ROOT_USER: devuser
      MINIO_ROOT_PASSWORD: devpassword123
    ports:
      - "9001:9000"   # API port
      - "9002:9001"   # Console port
    volumes:
      - minio_dev_data:/data

  # NestJS Backend (Development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development  # Use development stage
    environment:
      NODE_ENV: development
      PORT: 3001
      JWT_SECRET: dev-jwt-secret-key
      JWT_EXPIRES_IN: 7d  # Longer expiry for development
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: dev_user
      DB_PASSWORD: dev_password
      DB_DATABASE: gestion_emballages_dev
      DB_SYNCHRONIZE: true   # Auto-sync schemas in development
      DB_LOGGING: true       # Enable query logging
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # MinIO Configuration
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: devuser
      MINIO_SECRET_KEY: devpassword123
      MINIO_BUCKET_NAME: gestion-emballages-dev
      
      # Development Settings
      HOT_RELOAD: true
      DEBUG: true
      SWAGGER_ENABLED: true
      SEED_DATABASE: true
      SEED_ADMIN_EMAIL: admin@dev.com
      SEED_ADMIN_PASSWORD: admin123
      
      # CORS for development
      CORS_ORIGIN: http://localhost:4200,http://localhost:3000
      
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules  # Anonymous volume for node_modules
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    command: npm run start:dev
    networks:
      - gestion-emballages-dev-network

  # Angular Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development  # Use development stage
      args:
        API_URL: http://localhost:3001/api
    environment:
      - CHOKIDAR_USEPOLLING=true  # For file watching in Docker
    ports:
      - "4201:4200"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Anonymous volume for node_modules
      - /app/.angular      # Anonymous volume for Angular cache
    command: npm run start -- --host 0.0.0.0 --port 4200 --poll 2000
    networks:
      - gestion-emballages-dev-network

  # Adminer for Database Management
  adminer:
    image: adminer:latest
    container_name: gestion-emballages-dev-adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: dracula
    networks:
      - gestion-emballages-dev-network
    depends_on:
      - postgres

  # MailHog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: gestion-emballages-dev-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - gestion-emballages-dev-network

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: gestion-emballages-dev-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8082:8081"
    networks:
      - gestion-emballages-dev-network
    depends_on:
      - redis

  # PostgreSQL Test Database
  postgres-test:
    image: postgres:15-alpine
    container_name: gestion-emballages-test-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: gestion_emballages_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    ports:
      - "5434:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - gestion-emballages-dev-network
    profiles:
      - test

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  minio_dev_data:
    driver: local
  postgres_test_data:
    driver: local

networks:
  gestion-emballages-dev-network:
    driver: bridge
    name: gestion-emballages-dev-network