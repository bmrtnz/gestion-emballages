# Production Docker Compose Override
# Extends docker-compose.yml with production-specific configurations

services:
  # PostgreSQL Database (Production overrides)
  postgres:
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gestion_emballages_prod}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/backup:/backup
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis (Production overrides)
  redis:
    volumes:
      - redis_prod_data:/data
    restart: always
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # MinIO (Production overrides)
  minio:
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL:-https://minio.yourdomain.com}
    volumes:
      - minio_prod_data:/data
      - ./docker/minio/config:/root/.minio
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # NestJS Backend (Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: blue-whale-portal-backend-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3000
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1d}
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_DATABASE: ${POSTGRES_DB:-gestion_emballages_prod}
      DB_SYNCHRONIZE: false
      DB_LOGGING: false
      DB_SSL: ${DB_SSL:-false}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # MinIO Configuration
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-gestion-emballages}
      MINIO_USE_SSL: ${MINIO_USE_SSL:-false}
      
      # Production Settings
      CORS_ORIGIN: ${CORS_ORIGIN}
      LOG_LEVEL: ${LOG_LEVEL:-warn}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      
      # API Configuration
      API_PREFIX: api
      API_VERSION: v1
      
      # File Upload Configuration
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      ALLOWED_FILE_TYPES: ${ALLOWED_FILE_TYPES:-jpg,jpeg,png,pdf,doc,docx,xls,xlsx}
      
      # Security
      SECURITY_HSTS_MAX_AGE: 31536000
      SECURITY_HSTS_INCLUDE_SUBDOMAINS: true
      
    ports:
      - "3000:3000"
    volumes:
      - ./backend/uploads:/app/uploads:ro
      - ./logs/backend:/app/logs
    networks:
      - blue-whale-portal-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Angular Frontend (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        API_URL: ${API_URL:-http://backend:3000/api}
        PRODUCTION: true
    container_name: blue-whale-portal-frontend-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - blue-whale-portal-network
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load Balancer (HAProxy)
  loadbalancer:
    image: haproxy:2.8-alpine
    container_name: blue-whale-portal-loadbalancer
    ports:
      - "${LB_HTTP_PORT:-80}:80"
      - "${LB_HTTPS_PORT:-443}:443"
      - "${LB_STATS_PORT:-8404}:8404"  # HAProxy stats
    volumes:
      - ./docker/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./docker/haproxy/ssl:/etc/ssl/certs:ro
    restart: always
    networks:
      - blue-whale-portal-network
    depends_on:
      - frontend
    profiles:
      - loadbalancer

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: blue-whale-portal-backup
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-gestion_emballages_prod}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
    volumes:
      - ./docker/backup/scripts:/scripts:ro
      - ./backups:/backups
      - postgres_prod_data:/var/lib/postgresql/data:ro
    command: ["/scripts/backup.sh"]
    restart: "no"
    networks:
      - blue-whale-portal-network
    depends_on:
      - postgres
    profiles:
      - backup

  # Monitoring Stack (Optional profiles)
  prometheus:
    image: prom/prometheus:latest
    container_name: blue-whale-portal-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: always
    networks:
      - blue-whale-portal-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: blue-whale-portal-grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    restart: always
    networks:
      - blue-whale-portal-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  loki:
    image: grafana/loki:latest
    container_name: blue-whale-portal-loki
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - ./docker/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: always
    networks:
      - blue-whale-portal-network
    profiles:
      - monitoring

volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DATA_PATH:-./docker/data/postgres}
  redis_prod_data:
    driver: local
  minio_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MINIO_DATA_PATH:-./docker/data/minio}
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local