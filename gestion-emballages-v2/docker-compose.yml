# Docker Compose configuration for Gestion Emballages v2
# Main production configuration

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gestion-emballages-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: gestion_emballages
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - gestion-emballages-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: gestion-emballages-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gestion-emballages-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for File Storage
  minio:
    image: minio/minio:latest
    container_name: gestion-emballages-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - gestion-emballages-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # NestJS Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gestion-emballages-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_EXPIRES_IN: 1d
      
      # Database Configuration
      DB_TYPE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: gestion_emballages
      DB_SYNCHRONIZE: false
      DB_LOGGING: false
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # MinIO Configuration
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET_NAME: gestion-emballages
      MINIO_USE_SSL: false
      
      # CORS Configuration
      CORS_ORIGIN: http://localhost:4200,http://frontend:80
      
      # API Configuration
      API_PREFIX: api
      API_VERSION: v1
      
      # File Upload Configuration
      MAX_FILE_SIZE: 10485760
      ALLOWED_FILE_TYPES: jpg,jpeg,png,pdf,doc,docx,xls,xlsx
      
    ports:
      - "3000:3000"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    networks:
      - gestion-emballages-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Angular Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        API_URL: http://localhost:3000/api
    container_name: gestion-emballages-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - gestion-emballages-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Adminer for Database Management (Development only)
  adminer:
    image: adminer:latest
    container_name: gestion-emballages-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - gestion-emballages-network
    depends_on:
      - postgres
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  gestion-emballages-network:
    driver: bridge
    name: gestion-emballages-network