Ce document analyse l'architecture du backend du projet de gestion d'emballages, en se basant sur les fichiers fournis.

  1. Modules Principaux et Leurs Responsabilités

  L'architecture du backend est une application Node.js/Express classique, bien structurée et suivant le principe de séparation des préoccupations.

   * `server.js` (Point d'entrée) :
       * Responsabilité : Initialise le serveur Express, charge les variables d'environnement (dotenv), configure les middlewares globaux (CORS, express.json), connecte
         la base de données (MongoDB via Mongoose), initialise les services externes (MinIO), et monte les routeurs. C'est le chef d'orchestre de l'application.

   * `/config` (Configuration) :
       * Responsabilité : Centralise la configuration des services externes.
       * minioClient.js : Configure et exporte le client MinIO pour le stockage d'objets (fichiers).
       * swaggerConfig.js : Configure la génération de la documentation API via Swagger/OpenAPI.

   * `/routes` (Routage) :
       * Responsabilité : Définit les points d'entrée (endpoints) de l'API. Chaque fichier correspond à une ressource principale (ex: userRoutes.js, articleRoutes.js).
         Ils lient une URL et une méthode HTTP à une fonction spécifique du contrôleur, et appliquent les middlewares d'authentification et d'autorisation.

   * `/controllers` (Contrôleurs) :
       * Responsabilité : Contient la logique métier de chaque route. Les contrôleurs reçoivent les requêtes, interagissent avec les modèles pour manipuler les données,
         et renvoient une réponse HTTP. Ils ne communiquent pas directement avec la base de données mais passent par la couche Modèle (Mongoose).

   * `/models` (Modèles) :
       * Responsabilité : Définit la structure (schéma) des données à l'aide de Mongoose. C'est la couche d'abstraction de la base de données. Ils définissent les types
         de données, les validations, les relations (ref, refPath) et parfois des logiques pré-sauvegarde (comme le hachage de mot de passe dans userModel.js).

   * `/middleware` (Middlewares) :
       * Responsabilité : Contient des fonctions qui s'exécutent durant le cycle de vie requête-réponse.
       * authMiddleware.js : Gère l'authentification (vérification du token JWT) et l'autorisation (vérification des rôles).
       * errorMiddleware.js : Centralise la gestion des erreurs, ce qui est une excellente pratique.

   * `/services` (Services) :
       * Responsabilité : Encapsule une logique métier complexe ou réutilisable qui ne trouve pas sa place dans un contrôleur.
       * workflowService.js : Gère la logique complexe des transitions de statut des commandes.
       * commandeGlobaleService.js : Calcule le statut agrégé d'une commande globale.

   * `/utils` (Utilitaires) :
       * Responsabilité : Fournit des outils et des classes d'aide transverses.
       * appError.js : Définit des classes d'erreurs personnalisées pour une gestion des erreurs plus sémantique.
       * asyncHandler.js : Wrapper pour les fonctions asynchrones des contrôleurs, évitant la répétition des blocs try...catch.

   * `/data` (Données initiales) :
       * Responsabilité : Contient les données pour peupler la base de données (seeder.js), utile pour le développement et les tests.

  2. Flux de Données et Dépendances

  Le flux de données est unidirectionnel et suit un schéma classique d'API REST :

   1. Requête HTTP -> `server.js`
   2. -> Middleware global (CORS, JSON parser)
   3. -> Routeur (/routes/*.js) : trouve la route correspondante.
   4. -> Middleware de route (authMiddleware.js) : vérifie l'authentification et l'autorisation.
   5. -> Contrôleur (/controllers/*.js) : exécute la logique métier.
   6. -> Service (/services/*.js) (si nécessaire) : exécute une logique complexe.
   7. -> Modèle (/models/*.js) : interagit avec la base de données MongoDB.
   8. Réponse <- Contrôleur : formate la réponse HTTP.
   9. <- Middleware d'erreur (errorMiddleware.js) : intercepte et formate les erreurs survenues à n'importe quelle étape.

  Les dépendances sont bien gérées : les contrôleurs dépendent des modèles et des services, mais pas l'inverse. Les routes dépendent des contrôleurs. Cette
  faible-coupling facilite la maintenance et les tests.

  3. Utilisation de Design Patterns

   * MVC (Modèle-Vue-Contrôleur) : L'architecture est une variation de MVC, adaptée pour une API REST (la "Vue" étant la réponse JSON). Les responsabilités sont
     clairement séparées entre les Modèles (données), les Contrôleurs (logique), et les Routes (qui agissent comme des "mini-contrôleurs" de routage).
   * Middleware (Chain of Responsibility) : Le système de middlewares d'Express est une implémentation de ce pattern, où la requête passe à travers une chaîne de
     fonctions qui peuvent la traiter et/ou la passer à la suivante.
   * Singleton : Le client MinIO (minioClient.js) et la connexion Mongoose sont gérés comme des singletons (une seule instance partagée dans toute l'application), ce qui
     est efficace.
   * Factory (indirect) : Les classes d'erreurs dans appError.js peuvent être vues comme une forme simple de factory, permettant de créer des objets Erreur standardisés.
   * Module Pattern : L'utilisation de module.exports dans tout le projet suit le pattern Module de Node.js pour encapsuler et exposer des fonctionnalités spécifiques.